from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pickle
import os
import time
import csv

# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê
chrome_options = webdriver.ChromeOptions()
driver = webdriver.Chrome(options=chrome_options)

# üìÅ –§–ê–ô–õ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–£–ö
COOKIES_FILE = "cookies_for_max.pkl"


def manual_login():
    """–†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    print("üîê –ù–£–ñ–ù–ê –†–£–ß–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    print("1. –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("=" * 50)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    driver.get("–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞")
    time.sleep(2)

    # –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è
    input("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    save_cookies()

    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return True


def save_cookies():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏ –≤ —Ñ–∞–π–ª"""
    cookies = driver.get_cookies()
    with open(COOKIES_FILE, 'wb') as file:
        pickle.dump(cookies, file)
    print("üíæ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")


def load_cookies():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(COOKIES_FILE):
        driver.get("–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞")
        time.sleep(2)

        with open(COOKIES_FILE, 'rb') as file:
            cookies = pickle.load(file)

            for cookie in cookies:
                try:
                    driver.add_cookie(cookie)
                except:
                    continue

        print("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return True
    else:
        print("‚ùå –§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False


def check_login():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –ª–∏ –º—ã"""
    try:
        driver.get("–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞")
        time.sleep(3)

        # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_signs = [
            "//a[contains(text(), '–í—ã–π—Ç–∏')]",
            "//a[contains(text(), 'Logout')]",
            "//*[contains(@class, 'avatar')]",
            "//*[contains(text(), '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç')]"
        ]

        for sign in auth_signs:
            try:
                elements = driver.find_elements(By.XPATH, sign)
                if elements:
                    return True
            except:
                continue

        return False

    except:
        return False


def perform_search(search_query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: {search_query}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
    driver.get("–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å")
    time.sleep(3)

    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    try:
        search_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, 'q'))
        )

        # –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
        search_input.clear()
        search_input.send_keys(search_query)
        time.sleep(2)

        # –ù–∞–∂–∏–º–∞–µ–º Enter
        search_input.send_keys(Keys.RETURN)
        time.sleep(5)

        print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return False


def click_show_more():
    """–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'"""
    try:
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        button_selectors = [
            "button.btn.btn-light.border.lm-button.py-1.min-width-220px",
            "button:contains('–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')",
            "//button[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')]",
            "button[type='button']",
            ".lm-button",
            ".btn-light"
        ]

        for selector in button_selectors:
            try:
                if selector.startswith("//"):
                    buttons = driver.find_elements(By.XPATH, selector)
                elif "contains" in selector:
                    # –î–ª—è jQuery-style —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
                    buttons = driver.find_elements(
                        By.XPATH, "//button[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ')]")
                else:
                    buttons = driver.find_elements(By.CSS_SELECTOR, selector)

                for button in buttons:
                    if "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ" in button.text:
                        print("üîÑ –ù–∞–∂–∏–º–∞–µ–º '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'...")
                        driver.execute_script("arguments[0].click();", button)
                        time.sleep(3)
                        return True

            except Exception as e:
                continue

        print("‚ùå –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        return False


def scrape_channels():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö...")
    time.sleep(3)

    channels_data = []

    # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-src (–∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
    favorite_elements = driver.find_elements(
        By.CSS_SELECTOR, "[data-src*='@']")
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(favorite_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-src")

    for element in favorite_elements:
        try:
            data_src = element.get_attribute("data-src")

            if data_src and "@" in data_src and "/create" in data_src:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º @username –∏–∑ data-src
                username = data_src.split('@')[-1].split('/')[0]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                full_url = f"–Ω—É–∂–Ω–æ –±—ã–ª–æ –≤ –º–æ–µ–º –∫–µ–π—Å–µ –ø–æ –ø–æ–∏—Å–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–Ω–∞–ª–æ–≤ "

                channels_data.append({
                    'username': f"@{username}",
                    'url': full_url
                })

        except Exception as e:
            continue

    # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    if not channels_data:
        channel_links = driver.find_elements(
            By.CSS_SELECTOR, "a[href*='/channel/@']")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(channel_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã")

        for link in channel_links:
            try:
                href = link.get_attribute("href")
                if href and "/channel/@" in href:
                    username = href.split('/channel/@')[-1].split('/')[0]

                    channels_data.append({
                        'username': f"@{username}",
                        'url': f"–Ω—É–∂–Ω–æ –±—ã–ª–æ –≤ –º–æ–µ–º –∫–µ–π—Å–µ –ø–æ –ø–æ–∏—Å–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–Ω–∞–ª–æ–≤ "
                    })

            except Exception as e:
                continue

    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(channels_data)} –∫–∞–Ω–∞–ª–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    return channels_data


def scrape_with_pagination(search_query, max_channels=2000):
    """–ü–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'"""
    all_channels = []

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    if not perform_search(search_query):
        return all_channels

    page = 1
    consecutive_failures = 0

    while len(all_channels) < max_channels and consecutive_failures < 3:
        print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} | –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_channels)}")

        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        current_channels = scrape_channels()

        if current_channels:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
            new_channels = []
            for channel in current_channels:
                if channel not in all_channels:
                    new_channels.append(channel)

            all_channels.extend(new_channels)
            print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_channels)} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
            consecutive_failures = 0

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã")
            consecutive_failures += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(all_channels) >= max_channels:
            print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {max_channels} –∫–∞–Ω–∞–ª–æ–≤!")
            break

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∂–∞—Ç—å "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
        if click_show_more():
            page += 1
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            time.sleep(5)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'")
            consecutive_failures += 1

        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        if consecutive_failures >= 3:
            print("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä")
            break

    return all_channels


def save_to_csv(data, filename="tgstat_channels.csv"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
    if not data:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return False

    try:
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_data = []
        seen_usernames = set()

        for item in data:
            if item['username'] not in seen_usernames:
                unique_data.append(item)
                seen_usernames.add(item['username'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['username', 'url']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()
            for row in unique_data:
                writer.writerow(row)

        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(unique_data)}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")
        return False


# üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–†–û–¶–ï–°–°
print("=" * 60)
print("ü§ñ –ë–û–¢ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–∞–π—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ —Ç–≥")
print("=" * 60)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if not load_cookies() or not check_login():
    print("‚ùå –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    manual_login()
else:
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏ —É—Å–ø–µ—à–Ω–∞!")

# –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã
search_query = "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
max_channels = 2000

print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'")
print(f"üéØ –¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å –¥–æ {max_channels} –∫–∞–Ω–∞–ª–æ–≤")

all_channels = scrape_with_pagination(search_query, max_channels)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
if all_channels:
    filename = f"tgstat_{search_query}_{len(all_channels)}_channels.csv"
    if save_to_csv(all_channels, filename):
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
print(f"\nüìä –ò–¢–û–ì–ò:")
print(f"‚Ä¢ –°–æ–±—Ä–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_channels)}")
print(f"‚Ä¢ –§–∞–π–ª: n_{search_query}_*.csv")
print(f"‚Ä¢ –¢–µ–∫—É—â–∏–π URL: {driver.current_url}")

input("\n–ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä...")
driver.quit()
